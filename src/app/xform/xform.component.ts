import { Component, OnInit, AfterViewInit, Renderer2, Inject} from '@angular/core';
import {DOCUMENT} from '@angular/common';
import {DomSanitizer} from '@angular/platform-browser';
import { NgxXml2jsonService } from 'ngx-xml2json';
declare var viewInit: any;
declare var XsltForms_typeDefs: any;
declare var  XsltForms_globals: any;
declare var  getXMLData: any;
declare var  getValidation: any;


@Component({
  selector: 'app-xform',
  templateUrl: './xform.component.html',
  styleUrls: ['./xform.component.scss']
})
export class XformComponent implements OnInit, AfterViewInit {
  htmlView: any = '';
  payload: any = [];
  isScriptEnable = true;
  queryText = '<!DOCTYPE html\n' +
      '   SYSTEM "about:legacy-compat">\n' +
      '<html lang="en">\n' +
      '   <!--HTML elements generated by XSLTForms 1.7 (664) [Saxonica] - Copyright (C) 2023 <agenceXML> - Alain Couthures -\n' +
      '      http://www.agencexml.com\n' +
      '      -->\n' +
      '   <head>\n' +
      '      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n' +
      '      <meta name="viewport" content="initial-scale=1, width=device-width, viewport-fit=cover">\n' +
      '      <link type="text/css" href="xsltforms.css" rel="stylesheet">\n' +
      '      <title>Hello World in XForms</title>\n' +
      '      <script type="text/javascript" id="xsltforms-src" src="xsltforms.js" data-uri="http://www.agencexml.com/xsltforms" data-version="664">/* */</script>\n' +
      '   </head>\n' +
      '   <body>\n' +
      '      <xforms-form xmlns:xf="http://www.w3.org/2002/xforms" xf:xmlns="">\n' +
      '         <xforms-model>\n' +
      '            <xforms-instance id="searchSubmit">\n' +
      '               <script type="application/xml"><data\n' +
      '                  xmlns=""\n' +
      '                  ><name/><id/></data>\n' +
      '               </script>\n' +
      '            </xforms-instance>\n' +
      '            <xforms-bind xf-ref="/data/name" xf-type="xf:string" xf-required="true()"></xforms-bind>\n' +
      '            <xforms-bind xf-ref="/data/id" xf-type="xf:integer" xf-required="true()"></xforms-bind>\n' +
      '         </xforms-model>\n' +
      '         <xforms-body>\n' +
      '            <form>\n' +
      '               <xforms-input xf-ref="name" class="mr-3" xf-incremental="true">\n' +
      '                  <xforms-label>Please enter your first name: </xforms-label>\n' +
      '               </xforms-input>\n' +
      '               <xforms-input xf-ref="id" xf-incremental="true">\n' +
      '                  <xforms-label>Please enter your first Addr_id: </xforms-label>\n' +
      '               </xforms-input>\n' +
      '            </form>\n' +
      '         </xforms-body>\n' +
      '      </xforms-form>'
  options: any = {
    maxLines: 1000,
    printMargin: false,
    enableBasicAutocompletion: true,
    enableSnippets: true,
    enableLiveAutocompletion: true
  };
  constructor(@Inject(DOCUMENT) private document: Document,
              private renderer: Renderer2, private domSanitizer: DomSanitizer, private ngxXml2jsonService: NgxXml2jsonService) {
  }

  ngOnInit(): void {
  }
  ngAfterViewInit(): void {
  }

  public loadScript(): void {
    this.isScriptEnable = false;
    const body = document.body as HTMLDivElement;
    const script = document.createElement('script');
    script.id = 'XSLTform';
    script.src = '../../assets/js/xsltforms.js';
    script.async = true;
    script.defer = true;
    body.appendChild(script);

  }

  viewxform(): void {
    this.htmlView = this.domSanitizer.bypassSecurityTrustHtml(this.queryText);
    XsltForms_globals.close();
    XsltForms_typeDefs.initAll();
    setTimeout(() => {
      viewInit();
    });
  }


  getData(): void{
    this.payload = {};
    const xmlData = getXMLData();
    const xmlValidation = getValidation();
    for (let i = 0; i < xmlData.length;  i++) {
      if (xmlData[i].tagName !== undefined && xmlData[i].textContent !== undefined) {
        this.payload[xmlData[i].tagName] = xmlData[i].textContent;
      }
    }
    console.log(xmlValidation);
    console.log(this.payload);
  }
}
